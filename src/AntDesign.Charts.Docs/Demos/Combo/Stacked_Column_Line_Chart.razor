@page "/Stacked_Column_Line"
@inject IJSRuntime JS;

<DualAxes Data="@(new [] { uvBillData, transformData })" Config="config1" />

<Divider>动手实验</Divider>
<DynamicExample @ref="@example">
    <DualAxes @ref="@chart" />
</DynamicExample>

@code{

    public IChartComponent chart;
    DynamicExample example;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        example.Chart = chart;
    }


    #region 示例1

    object uvBillData = new object[]
    {
        new { time = "2019-03", value = 350, type = "uv" },
        new { time = "2019-04", value = 900, type = "uv" },
        new { time = "2019-05", value = 300, type = "uv" },
        new { time = "2019-06", value = 450, type = "uv" },
        new { time = "2019-07", value = 470, type = "uv" },
        new { time = "2019-03", value = 220, type = "bill" },
        new { time = "2019-04", value = 300, type = "bill" },
        new { time = "2019-05", value = 250, type = "bill" },
        new { time = "2019-06", value = 220, type = "bill" },
        new { time = "2019-07", value = 362, type = "bill" },
    };

    object transformData = new object[]
    {
        new { time = "2019-03", count = 800 },
        new { time = "2019-04", count = 600 },
        new { time = "2019-05", count = 400 },
        new { time = "2019-06", count = 380 },
        new { time = "2019-07", count = 220 },
    };

    DualAxesConfig config1 = new DualAxesConfig()
    {
        XField = "time",
        YField = new string[] { "value", "count" },
        GeometryOptions = new object[]
        {
            new
            {
                Geometry = "column",
                IsStack = true,
                seriesField = "type"
            },
            new
            {
                Geometry = "line",
            },
        },
    };

    #endregion 示例1

}


